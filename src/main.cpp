#include <Arduino.h>
#include "ui/lv_setup.h"
#include "ui/ui.h"
#include "pin_config.h"
#include "time_func.h"
#include <WiFi.h>


#include <FirebaseClient.h>

#define WIFI_SSID "Van_Baelen"
#define WIFI_PASSWORD "Rob88333"

// The API key can be obtained from Firebase console > Project Overview > Project settings.
#define API_KEY "AIzaSyDrLQwV6UhHVUgAmvk3tsEju6OcsE_J6UQ"

// User Email and password that already registerd or added in your project.
#define USER_EMAIL "vbtechnieken@gmail.com"
#define USER_PASSWORD "qwerty"
#define DATABASE_URL "https://poolhub-79e4b-default-rtdb.europe-west1.firebasedatabase.app/"

void asyncCB(AsyncResult &aResult);
// Print the result of the Firebase Realtime Database operation
void printResult(AsyncResult &aResult);
// Define the Firebase Data object
DefaultNetwork network; // initilize with boolean parameter to enable/disable network reconnection
// Firebase Authentication object to handle the user's authentication process
UserAuth user_auth(API_KEY, USER_EMAIL, USER_PASSWORD);
// FirebaseApp object to handle the communication with the Firebase server
FirebaseApp app;


#include <WiFiClientSecure.h>
WiFiClientSecure ssl_client1, ssl_client2;

// AsyncClient for Firebase Realtime Database
using AsyncClient = AsyncClientClass;
// AsyncClient for Firebase Realtime Database
AsyncClient aClient(ssl_client1, getNetwork(network)), aClient2(ssl_client2, getNetwork(network));
// Firebase Realtime Database object
RealtimeDatabase Database;

unsigned long ms = 0;

char date_buffer[24] = {0};
char time_buffer[9] = {0};

void setup()
{
  Serial.begin(115200);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Firebase.printf("Firebase Client v%s\n", FIREBASE_CLIENT_VERSION);

  Serial.println("Initializing app...");


  ssl_client1.setInsecure();
  ssl_client2.setInsecure();



  initializeApp(aClient2, app, getAuth(user_auth), asyncCB, "authTask");

  // Binding the FirebaseApp for authentication handler.
  // To unbind, use Database.resetApp();
  app.getApp<RealtimeDatabase>(Database);

  Database.url(DATABASE_URL);

  // Since v1.2.1, in SSE mode (HTTP Streaming) task, you can filter the Stream events by using RealtimeDatabase::setSSEFilters(<keywords>),
  // which the <keywords> is the comma separated events.
  // The event keywords supported are:
  // get - To allow the http get response (first put event since stream connected).
  // put - To allow the put event.
  // patch - To allow the patch event.
  // keep-alive - To allow the keep-alive event.
  // cancel - To allow the cancel event.
  // auth_revoked - To allow the auth_revoked event.
  // To clear all prevousely set filter to allow all Stream events, use RealtimeDatabase::setSSEFilters().
  Database.setSSEFilters("get,put,patch,keep-alive,cancel,auth_revoked");

  // The "unauthenticate" error can be occurred in this case because we don't wait
  // the app to be authenticated before connecting the stream.
  // This is ok as stream task will be reconnected automatically when the app is authenticated.
  Database.get(aClient, "/test/stream", asyncCB, true /* SSE mode (HTTP Streaming) */, "streamTask");
  lv_begin();  // Initialize lvgl with display and touch
  ui_init();   // Initialize UI generated by Square Line
  time_init(); // Initialize time and date from compiler
}

void loop()
{
  app.loop();
  Database.loop();
  lv_handler();  // Update UI
  update_time(); // Update time and date on UI

  if (millis() - ms > 20000 && app.ready())
  {
    ms = millis();

    char buffer[50] = {0};
    strcat(buffer, time_buffer);
    strcat(buffer, date_buffer);
    digitalWrite(PIN_LCD_POWER_ON, digitalRead(PIN_LCD_POWER_ON)); // Turn on the display enable pin
    JsonWriter writer;

    object_t json, obj1, obj2, obj3;

    writer.create(obj1, "ms", ms);
    writer.create(obj2, "rand", random(10000, 30000));
    writer.create(obj3, "date", String(buffer));
    writer.join(json, 3, obj1, obj2, obj3);

    Database.set<object_t>(aClient2, "/test/stream/number", json, asyncCB, "setTask");
  }
}

void asyncCB(AsyncResult &aResult)
{
  // WARNING!
  // Do not put your codes inside the callback and printResult.

  printResult(aResult);
}

void printResult(AsyncResult &aResult)
{
  if (aResult.isEvent())
  {
    Firebase.printf("Event task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.appEvent().message().c_str(), aResult.appEvent().code());
  }

  if (aResult.isDebug())
  {
    Firebase.printf("Debug task: %s, msg: %s\n", aResult.uid().c_str(), aResult.debug().c_str());
  }

  if (aResult.isError())
  {
    Firebase.printf("Error task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.error().message().c_str(), aResult.error().code());
  }

  if (aResult.available())
  {
    RealtimeDatabaseResult &RTDB = aResult.to<RealtimeDatabaseResult>();
    if (RTDB.isStream())
    {
      Serial.println("----------------------------");
      Firebase.printf("task: %s\n", aResult.uid().c_str());
      Firebase.printf("event: %s\n", RTDB.event().c_str());
      Firebase.printf("path: %s\n", RTDB.dataPath().c_str());
      Firebase.printf("data: %s\n", RTDB.to<const char *>());
      Firebase.printf("type: %d\n", RTDB.type());

      // The stream event from RealtimeDatabaseResult can be converted to the values as following.
      bool v1 = RTDB.to<bool>();
      int v2 = RTDB.to<int>();
      float v3 = RTDB.to<float>();
      double v4 = RTDB.to<double>();
      String v5 = RTDB.to<String>();
    }
    else
    {
      Serial.println("----------------------------");
      Firebase.printf("task: %s, payload: %s\n", aResult.uid().c_str(), aResult.c_str());
    }


    Firebase.printf("Free Heap: %d\n", ESP.getFreeHeap());

  }
}